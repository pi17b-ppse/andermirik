<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://docbook.org/xml/5.1/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://docbook.org/xml/5.1/sch/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<article xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1">
    <info>
        <title>Документация к проекту "Paint"</title>
        <author>
            <personname>
                <firstname>Андрей</firstname>
                <surname>Огурцов</surname>
            </personname>
        </author>
        <copyright>
            <year>2021</year>
            <holder>Андрей Огурцов</holder>
        </copyright>
    </info>
    <chapter>
        <title>Описание проекта</title>
        <para>«Графический редактор»  — компьютерная программа для рисования на холсте при помощи
            кисти разными цветами. </para>
        <para>Можно выбирать цвет кисти из блока слева. </para>
        <para>Можно Выбрать стирающую кисть. </para>
        <para>Можно очистить холст.</para>
        <para>Можно рисовать прямоугольники</para>
        <para>Можно рисовать пикселями.</para>
        <para>Имеется возможность выбора толщины кисти и стиля кисти, который будет определять каким
            образом будет соединяться кисть между собой (с закруглением, квадратно или
            криво).</para>
        <informalfigure>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="image1.jpg"/>
                </imageobject>
            </mediaobject>
        </informalfigure>
    </chapter>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata fileref="imag2.jpg"/>
            </imageobject>
        </mediaobject>
    </informalfigure>
    <chapter>
        <title>Детали реализации</title>
        <para>Особенности реализации отдельного функционала представлены ниже:</para>
        <section>
            <title>Функция "Кисть"</title>
            <para>Зададим функцию для рисования линии</para>
            <example>
                <programlisting><![CDATA[
  function lines() {
	//painting = false;
	//Remove event listeners so line won't draw rectangle
	if (removeRectangleInLine == 1) {
		canvas.removeEventListener('mousedown', rectMouseDown);
		canvas.removeEventListener('mouseup', rectMouseUp);
		canvas.removeEventListener('mousemove', rectMouseMove);
		canvas.removeEventListener('mouseout', rectMouseout);
	};

	//Initialize mouse coordinates to 0,0
	var mouse = { x: 0, y: 0};

	//Paint includes line width, line cap, and color
	paint = function() {
		ctx.lineTo(mouse.x, mouse.y);
		ctx.lineWidth = lineWidthRange();
		ctx.lineJoin = 'round';
		ctx.lineCap = brushstyle;
		ctx.strokeStyle = colors;
		ctx.stroke();
	};

	//Find mouse coordinates relative to canvas
	linesMousemove = function(e){
		mouse.x = e.pageX - this.offsetLeft;
		mouse.y = e.pageY - this.offsetTop;
	};

	//User clicks down on canvas to trigger paint
	linesMousedown = function(){
		ctx.beginPath();
		ctx.moveTo(mouse.x, mouse.y);
		canvas.addEventListener('mousemove', paint, false);
	};

	//When mouse lifts up, line stops painting
	linesMouseup = function(){
		canvas.removeEventListener('mousemove', paint, false);
	};

	//When mouse leaves canvas, line stops painting
	linesMouseout = function() {
		canvas.removeEventListener('mousemove', paint, false);
	};

	//Event listeners that will trigger the paint functions when
	//mousedown, mousemove, mouseup, mouseout
	canvas.addEventListener('mousedown', linesMousedown, false);
	canvas.addEventListener('mousemove', linesMousemove, false);
	canvas.addEventListener('mouseup', linesMouseup, false);
	canvas.addEventListener('mouseout', linesMouseout, false);

};
                ]]></programlisting>
            </example>
        </section>
        <section>
            <title>Функция "Выбор цвета"</title>
            <para>В зависимости от нажатой кнопки на цветовой палитре, выбираем нужный цвет</para>
            <example>
                <programlisting><![CDATA[var colors;

/**
 * Выбрать цвет из палитры цветов
 * @param palette Палитра цветов
 * @return цвет
 */
function changeColors(palette) {
	switch(palette.id) {
		case "red":
			colors = "red";
			break;
		case "red1":
			colors = "#F16161";
			break;
		case "red2":
			colors = "#F69FA0";
			break;
		case "orange":
			colors = "orange";
			break;
		case "orange1":
			colors = "#F99F62";
			break;
		case "orange2":
			colors = "#FBB57B";
			break;
		case "blue":
			colors = "#09C2DB";
			break;
		case "blue1":
			colors = "#8BD3DC";
			break;
		case "blue2":
			colors = "#B9E3E8";
			break;
		case "indigo":
			colors = "#0E38AD";
			break;
		case "indigo1":
			colors = "#546AB2";
			break;
		case "indigo2":
			colors = "#9C96C9";
			break;
		case "green":
			colors = "green";
			break;
		case "green1":
			colors = "#97CD7E";
			break;
		case "green2":
			colors = "#C6E2BB";
			break;
		case "black":
			colors = "black";
			break;
		case "black1":
			colors = "#545454";
			break;
		case "black2":
			colors = "#B2B2B2";
			break;
		case "yellow":
			colors = "yellow";
			break;
		case "yellow1":
			colors = "#F7F754";
			break;
		case "yellow2":
			colors ="#F7F4B1";
			break;
		case "purple":
			colors = "#B9509E";
			break;
		case "purple1":
			colors = "#D178B1";
			break;
		case "purple2":
			colors = "#E3ABCE";
			break;
		case "erase":
			colors = "white";
			break;
	}
};
                ]]></programlisting>
            </example>
        </section>
        <section>
            <title>Функция "Нарисовать прямоугольник"</title>
            <para>Позволяет пользователю нарисовать прямоугольники</para>
            <example>
                <programlisting><![CDATA[
function rectangle() {
	removeRectangleInLine = 1;

	canvas.removeEventListener('mousedown', linesMousedown, false);
	canvas.removeEventListener('mousemove', linesMousemove, false);
	canvas.removeEventListener('mouseup', linesMouseup, false);
	canvas.removeEventListener('mouseout', linesMouseout, false);

	//Initialize mouse coordinates to 0,0
	var mouse = {x: 0, y: 0};

	//Draw rectangle
	draw = function() {
		ctx.fillStyle = "black";
		ctx.fillStyle = colors;
		ctx.fillRect(mouse.x, mouse.y, mouse.w, mouse.h);
	};

	//Find mouse coordinates relative to canvas
	rectMouseMove = function(e) {
	    mouse.w = (e.pageX - this.offsetLeft) - mouse.x;
	    mouse.h = (e.pageY - this.offsetTop) - mouse.y ;
	};

	//User clicks down on canvas to trigger draw
	rectMouseDown = function(e) {
		ctx.beginPath();
		mouse.x = e.pageX - this.offsetLeft;
		mouse.y = e.pageY - this.offsetTop;
		canvas.addEventListener('mousemove', draw, false);
	};

	//When mouse lifts up, line stops drawing
	rectMouseUp = function() {
		canvas.removeEventListener('mousemove', draw, false);
	};

	//When mouse leaves canvas, line stops drawing
	rectMouseout = function() {
		canvas.removeEventListener('mousemove', draw, false);
	};

	//Event listeners that will trigger the draw functions when
	//mousedown, mousemove, mouseup, mouseout
	canvas.addEventListener('mousedown', rectMouseDown, false);
	canvas.addEventListener('mouseup', rectMouseUp, false);
	canvas.addEventListener('mousemove', rectMouseMove, false);
	canvas.addEventListener('mouseout', rectMouseout, false);
};
                ]]></programlisting>
            </example>
        </section>
    </chapter>
</article>